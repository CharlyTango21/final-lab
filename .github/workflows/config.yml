name: Build and Deploy
on:
  push:
    branches:
      - feature/lab_final

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
      
      - name: Configurar JDK 17
        uses: actions/setup-java@v2
        with:
            java-version: '17'
            distribution: 'adopt'
      
      - name: Obtener Codigo
        uses: actions/checkout@v4

      - name: Validar existencia del proyecto en SonarCloud
        id: validarProyectoEnSonar
        run: |
          set +e
          curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/projects/create' -d 'name=${{ github.event.repository.name }}' -d 'project=${{ github.event.repository.name }}' -d 'organization=labfinal-devsecops' -d 'visibility=public'
          if [ $? -ne 0 ]
          then
            echo "Proyecto ya existe en SonarCloud"
            # bash./.github/workflows/send-email.sh "Error SonarCloud" "Se produjo un error en la instalaci칩n de SonarCloud en ${REPO_GITHUB}."
          else
            echo "Proyecto ${{ github.event.repository.name }} creado exitosamente"

            echo "Se establece rama main como rama por defecto"
            curl -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' '-d name=main' -d 'name=${{ github.event.repository.name }}'
          fi

      - name: Instalar Sonar Scanner
        id: InstallSonarScan
        run: |
          npm install -g sonar-scanner

      - name: An치lisis SonarCloud
        if: steps.InstallSonarScan.outcome == 'success' 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ github.event.repository.name }} \
            -Dsonar.organization=labfinal-devsecops \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.branch.name=feature/lab_final \
            -Dsonar.sources=. \
            -Dsonar.language=js \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=**/node_modules/** \
            -Dsonar.inclusions=**/*.js,**/*.jsx,**/*.ts,**/*.tsx \
            # -Dsonar.qualitygate.wait=true

      - name: Mensaje de finalizaci칩n
        run: echo "Termino Job "

  CSA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:

      - name: Configurar JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Obtener Codigo
        uses: actions/checkout@v4

      - name: Download Dependency Check
        run: |
          curl -sSf https://github.com/jeremy-long/dependency-check/releases/latest/download/dependency-check-latest-release.zip -o dependency-check-latest-release.zip

      - name: Extract Dependency Check
        run: |
          unzip dependency-check-latest-release.zip

      - name: Run Dependency Check
        run: |
          ./dependency-check.sh --scan /github/workspace --format XML --out /github/workspace/report.xml

      - name: Download Dependency Check
        run: |
          curl -sSf https://github.com/jeremy-long/dependency-check/releases/latest/download/dependency-check-latest-release.zip -o dependency-check-latest-release.zip
      # - name: Elimnar package-lock.json
      #   run: rm package-lock.json

      # - name: Regenerar package-lock.json
      #   run: npm install

      # - name: An치lisis SCA
      #   uses: dependency-check/dependency-check_action@1.1.0
      #   env:
      #     JAVA_HOME: /opt/jdk
      #     NODE_AUDIT_PACKAGE_MANAGER: npm
      #     NODE_AUDIT_IGNORE_YARN_LOCK: false
      #   id: Depcheck
      #   with:
      #     project: '${{ github.event.repository.name }}'
      #     path: '.'
      #     format: 'HTML'
      #     out: 'report'
      #     args: >
      #       --failOnCVSS 7
      #       --enableRetired

      # - name: Upload resultado
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: Depcheck report
      #     path: ${{github.workspace}}/report
