name: Build and Deploy
on:
  push:
    branches:
      - feature/lab_final

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
      
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
            java-version: '17'
            distribution: 'adopt'
      
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Validate existence of the project in SonarCloud
        run: |
          set -e
          response=$(curl -s -o /dev/null -w "%{http_code}" -u '${{ secrets.SONAR_TOKEN }}:' "https://sonarcloud.io/api/projects/create?name=${{ github.event.repository.name }}&project=${{ github.event.repository.name }}&organization=labfinal-devsecops&visibility=public")
          if [ "$response" -ne "201" ]
          then
            echo "Proyecto ya existe en SonarCloud"
            # bash./.github/workflows/send-email.sh "Error SonarCloud" "Se produjo un error en la instalación de SonarCloud en ${REPO_GITHUB}."
          else
            echo "Proyecto ${{ github.event.repository.name }} creado exitosamente"

            echo "Se establece rama main como rama por defecto"
            curl -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' '-d name=main' -d 'name=${{ github.event.repository.name }}'
          fi

      - name: Install Sonar Scann
        id: InstallSonarScan
        run: |
           npm install -g sonar-scanner
           if [ $? -ne 0 ]
           then
            echo "Error al instalar Sonar Scanner"
            exit 1
           fi
    
      - name: SonarCloud Analysis
        if: steps.InstallSonarScan.outcome == 'success' 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ github.event.repository.name }} \
            -Dsonar.organization=labfinal-devsecops \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.branch.name=feature/lab_final \
            -Dsonar.sources=. \
            -Dsonar.language=js \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=**/node_modules/** \
            -Dsonar.inclusions=**/*.js,**/*.jsx,**/*.ts,**/*.tsx          
          if [ $? -ne 0 ]
          then
            echo "Error al ejecutar SonarCloud"
            exit 1
          fi

      - name: Check Vulnerability
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -X GET \
          https://sonarcloud.io/api/issues/search \
          -H 'Authorization: Bearer $SONAR_TOKEN' \
          -H 'Content-Type: application/json' \
          -d '{
            "componentKeys": ["${{ github.event.repository.name }}"],
            "types": ["VULNERABILITY"]
          }'
            
          response=$(jq '.issues[] |.severity,.message' -r)
          if [ -n "$response" ]; then
            echo "Vulnerabilities found:"
            echo "$response"
              
            # Check for medium, high, or critical vulnerabilities
            critical_vulns=$(jq '.issues[] | select(.severity == "CRITICAL") |.message' -r)
            high_vulns=$(jq '.issues[] | select(.severity == "HIGH") |.message' -r)
            medium_vulns=$(jq '.issues[] | select(.severity == "MEDIUM") |.message' -r)
              
            if [ -n "$critical_vulns" ]; then
              echo "Critical vulnerabilities found:"
              echo "$critical_vulns"
              exit 1
            elif [ -n "$high_vulns" ]; then
              echo "High vulnerabilities found:"
              echo "$high_vulns"
              exit 1
            elif [ -n "$medium_vulns" ]; then
              echo "Medium vulnerabilities found:"
              echo "$medium_vulns"
              exit 1
            fi
          else
            echo "No vulnerabilities found"
          fi

  CSA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:

      # - name: Set up Node.js 20
      #   uses:  actions/setup-node@v2
      #   with:
      #     node-version: '20'

      # - name: Checkout Code
      #   uses: actions/checkout@v2

      # - name: Run Snyk to check for vulnerabilities
      #   uses: snyk/actions/node@master
      #   env:
      #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with: 
      #     args: --allprojects --severerty-threshold=high --json > nayk-output.json

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set permissions for package-lock.json
        run: chmod 777 package-lock.json

      - name: Run NodeAuditAnalyzer
        run: node-audit-analyzer package-lock.json

      - name: Install dependencies
        run: |
          npm install
          yarn install

      - name: Build Project
        run: npm run build

      - name: Remove yarn.lock
        run: rm yarn.lock

      - name: SCA Analisys
        uses: dependency-check/Dependency-Check_Action@1.1.0
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: '${{ github.event.repository.name }}'
          path: '.'
          format: 'HTML'
          out: 'report'
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Upload Result
        uses: actions/upload-artifact@master
        with:
          name: Depcheck report
          path: ${{github.workspace}}/reports

      - name: Upload JAR
        uses: actions/upload-artifact@master
        with:
          name: JAR
          path: ${{github.workspace}}/build/libs/spring-lab_final-2.6.0.jar

  DOCKER_BUILD:
    needs: CSA
    runs-on: self-hosted
    steps:

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker
        run: |
          docker build -t charlytango21/lab-final:latest .
          docker push charlytango21/lab-final:latest
                        

  DOCKER_SCAN:
    needs: DOCKER_BUILD
    runs-on: ubunto-latest
    steps:

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Image Docker
        run: |
          docker pull charlytango21/lab-final:latest

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with: 
          image-ref: 'charlytango21/lab-final:latest'
          format: 'table'

  DAST:
    needs: DOCKER_SCAN
    runs-on: self-hosted
    steps:
      
      # - name: Despliegue de la aplicación
      #   run: |
      #     docker run -p 8085:8085 --name lab-final-deploy -d charlytango21/lab-final:latest 
        
      # - name: Sleep
      #   run: sleep 3

      - name: OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.11.0
        with: 
          targert: 'http://localhost:8085'