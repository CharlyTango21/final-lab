name: Build and Deploy
on:
  push:
    branches:
      - feature/lab_final

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
      
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
            java-version: '17'
            distribution: 'adopt'
      
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate existence of the project in SonarCloud
        run: |
          set -e
          response=$(curl -s -o /dev/null -w "%{http_code}" -u '${{ secrets.SONAR_TOKEN }}:' "https://sonarcloud.io/api/projects/create?name=${{ github.event.repository.name }}&project=${{ github.event.repository.name }}&organization=labfinal-devsecops&visibility=public")
          if [ "$response" -ne "201" ]
          then
            echo "Proyecto ya existe en SonarCloud"
            # bash./.github/workflows/send-email.sh "Error SonarCloud" "Se produjo un error en la instalaciÃ³n de SonarCloud en ${REPO_GITHUB}."
          else
            echo "Proyecto ${{ github.event.repository.name }} creado exitosamente"

            echo "Se establece rama main como rama por defecto"
            curl -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' '-d name=main' -d 'name=${{ github.event.repository.name }}'
          fi

      - name: Install Sonar Scann
        id: InstallSonarScan
        run: |
           npm install -g sonar-scanner
           if [ $? -ne 0 ]
           then
            echo "Error al instalar Sonar Scanner"
            exit 1
           fi

      - name: SonarCloud Analysis
        if: steps.InstallSonarScan.outcome == 'success' 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ github.event.repository.name }} \
            -Dsonar.organization=labfinal-devsecops \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.branch.name=feature/lab_final \
            -Dsonar.sources=. \
            -Dsonar.language=js \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=**/node_modules/** \
            -Dsonar.inclusions=**/*.js,**/*.jsx,**/*.ts,**/*.tsx \
            # -Dsonar.qualitygate.wait=true
          if [ $? -ne 0 ]
          then
            echo "Error al ejecutar SonarCloud"
            exit 1
          fi

      - name: Finish Job
        run: echo "Termino del Job "

  # CSA:
  #   needs: SAST
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         npm install
  #         yarn install

  #     - name: Build Project
  #       run: npm run build

  #     - name: NodeAuditAnalyzer
  #       uses: github/codeql-action/node-audit@v2
  #       with:
  #         args: --ignore-yarn-lock

  #     - name: SCA Analisys
  #       uses: dependency-check/Dependency-Check_Action@1.1.0
  #       env:
  #         JAVA_HOME: /opt/jdk
  #         NODE_AUDIT_PACKAGE_MANAGER: yarn
  #         #NODE_AUDIT_IGNORE_YARN_LOCK: true
  #       id: Depcheck
  #       with:
  #         project: '${{ github.event.repository.name }}'
  #         path: '.'
  #         format: 'HTML'
  #         out: 'report'
  #         args: >
  #           --failOnCVSS 7
  #           --enableRetired

  #     - name: Upload Result
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: Depcheck report
  #         path: ${{github.workspace}}/reports

  #     - name: Upload JAR
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: JAR
  #         path: ${{github.workspace}}/build/libs/spring-lab_final-2.6.0.jar
      
  #     - name: Finish Job
  #       run: echo "Termino del Job "

  DOCKER_BUILD:
    #needs: CSA
    needs: SAST
    runs-on: self-hosted
    steps:

      - name: Checkout Code
        uses: actions/checkout@v2

      # - name: Docker Login
      #   uses: docker/login-action@v3.0.0
      #   with:
      #     username: $ {{ secret.DOCKER_USER }}
      #     password: $ {{ secret.DOCKER_PASSWORD }}

      # - name: Descargar JAR
      #   uses: actions/download-artifact@master
      #   with:
      #     name: JAR
      #     path: ${{github.workspace}}

      # - name: Build Docker
      #   run: |
      #     docker build --tag charlytango21/lab-final:latest .
          
    
      # - name: Push Docker
      #   run: |
      #     docker push charlytango21/lab-final:tagname

      # - name: Finish Job
      #   run: echo "Termino del Job "

  # DOCKER_SCAN:
  #   needs: DOCKER_BUILD
  #   runs-on: ubunto-latest
  #   steps:

  #     - name: Docker Login
  #       uses: docker/login-action@v3.0.0
  #       with:
  #         username: $ {{ secret.DOCKER_USER }}
  #         password: $ {{ secret.DOCKER_PASSWORD }}

  #     - name: Pull Image Docker
  #       run: |
  #         docker pull charlytango21/final-lab:latest

  #     - name: Run Trivy Vulnerability Scanner
  #       uses: aquasecurity/trivy-action@master
  #       with: 
  #         image-ref: 'charlytango21/final-lab:latest'
  #         format: 'table'