name: Build and Deploy
on:
  push:
    branches:
      - feature/lab_final

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
      
      - name: Configurar JDK 17
        uses: actions/setup-java@v2
        with:
            java-version: '17'
            distribution: 'adopt'
      
      - name: Obtener Codigo
        uses: actions/checkout@v4

      - name: Validar existencia del proyecto en SonarCloud
        id: validarProyectoEnSonar
        run: |
          set +e
          curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/projects/create' -d 'name=${{ github.event.repository.name }}' -d 'project=${{ github.event.repository.name }}' -d 'organization=labfinal-devsecops' -d 'visibility=public'
          if [ $? -ne 0 ]
          then
            echo "Proyecto ya existe en SonarCloud"
            # bash./.github/workflows/send-email.sh "Error SonarCloud" "Se produjo un error en la instalaci칩n de SonarCloud en ${REPO_GITHUB}."
          else
            echo "Proyecto ${{ github.event.repository.name }} creado exitosamente"

            echo "Se establece rama main como rama por defecto"
            curl -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' '-d name=main' -d 'name=${{ github.event.repository.name }}'
          fi

      - name: Instalar Sonar Scanner
        id: InstallSonarScan
        run: |
          npm install -g sonar-scanner

      - name: An치lisis SonarCloud
        if: steps.InstallSonarScan.outcome == 'success' 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ github.event.repository.name }} \
            -Dsonar.organization=labfinal-devsecops \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.branch.name=feature/lab_final \
            -Dsonar.sources=. \
            -Dsonar.language=js \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=**/node_modules/** \
            -Dsonar.inclusions=**/*.js,**/*.jsx,**/*.ts,**/*.tsx \
            # -Dsonar.qualitygate.wait=true

      - name: Mensaje de finalizaci칩n
        run: echo "Termino Job "

  CSA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:

      # - name: Configurar JDK 17
      #   uses: actions/setup-java@v2
      #   with:
      #     java-version: '17'
      #     distribution: 'adopt'

      - name: Obtener Codigo
        uses: actions/checkout@v4

      # - name: Elimnar package-lock.json
      #   run: rm package-lock.json

      - name: Regenerar package-lock.json
        run: npm install

      - name: Regenerar package-lock.json
        run: yarn install

      - name: Compila el proyecto
        id: CompilaProject
        run: npm run build

      - name: An치lisis SCA
        if: steps.CompilaProject.outcome == 'success'
        uses: dependency-check/Dependency-Check_Action@1.1.0
        env:
          JAVA_HOME: /opt/jdk
          #NODE_AUDIT_PACKAGE_MANAGER: npm
          #NODE_AUDIT_IGNORE_YARN_LOCK: true
        id: Depcheck
        with:
          project: '${{ github.event.repository.name }}'
          path: '.'
          format: 'HTML'
          out: 'report'
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Subir resultado
        uses: actions/upload-artifact@master
        with:
          name: Depcheck report
          path: ${{github.workspace}}/reports

      - name: Subir JAR
        uses: actions/upload-artifact@master
        with:
          name: JAR
          path: ${{github.workspace}}/build/libs/spring-lab_final-2.6.0.jar

  # DOCKER_BUILD:
  #   #needs: CSA
  #   needs: SAST
  #   runs-on: self-hosted
  #   steps:
  #     - name: Obtener Codigo
  #       uses: actions/checkout@v4

  #     - name: Docker Login
  #       uses: docker/login-action@v3.0.0
  #       with:
  #         username: $ {{ secret.DOCKER_USER }}
  #         password: $ {{ secret.DOCKER_PASSWORD }}

  #     - name: Descargar JAR
  #       uses: action/download-artifact@master
  #       with:
  #         name: JAR
  #         path: ${{github.workspace}}

  #     - name: Build Docker
  #       run: |
  #         docker build --tag charlytango21/final-lab:latest .